#2.0
    1.  package.json 생성
        ⏩   터미널에 npm init 입력하면 자동으로 생성nodeJS 프로젝트
        ⏩   package.json은 nodeJS 프로젝트
        ⏩   JSON = 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나 (보통 객체를 생각하면 됌)
            ➕  package.json의 내부는 JSON 방식으로 작성되어 있음

    2.  index.js생성 

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#2.1
    1.  express 설치
        ⏩   npm i express
            ➕  node_modules 폴더 생김
                👉🏻  npm으로 설치한 모든 패키지가 저장
            ➕  packge-lock.json 생성

    2.  package.json 수정
        ⏩   "scripts" : { "server" : "node index.js" }
            ➕  터미널에 npm run dev 입력하면 index.js가 실행된다.
        ⏩   "dependencies" : { "express" :  "^4.18.1" }
            ➕  express가 설치되면서 자동으로 추가 된다.

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#2.2
    1.  .gitignore 생성
        ⏩   /node_modules

    2.  npm i 
        ⏩   npm이 package.json의 "dependencies"를 보고 필요한 것들을 모두 설치해준다.

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#2.3
    1.  babel 설치 방법
        ⏩   babel은 최신식 JS문법을 구식 JS문법으로 변환시켜 nodeJS 가 이해 할 수 있도록 해준다.
        ⏩   babeljs 홈페이지 > Setup > node선택 > 2번 복붙 > babel.config.json 생성 > 4번-shell 복붙 > 4번-JSON을 babel.config.json에 복붙

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#2.4
    1.  nodemon 설치 방법
        ⏩   nodemon은 서버의 변동사항을 감지해서 자동으로 서버를 재시작 해준다. 
        ⏩   babeljs 홈페이지 > Setup > nodemon > 2번 복붙 > package.json > npm i nodemon --save-dev > package.json > "scripts" : { "dev" : "nodemon --exec babel-node index.js" } 
    
    

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.0
    1.  src 폴더 생성
        ⏩   코드와 로직을 가지고 있는 파일들을 넣는다.
    
    2.  package.json 수정
        ⏩   "scripts": { "dev": "nodemon --exec babel-node src/server.js" }
            ➕  index.js ➡ server.js 파일명 변경 및 경로 변경 
    
    3.  server.js 수정
        ⏩   import express from "express"
            ➕  서버 임포트
        ⏩   const app = express();
            ➕  서버 선언
        ⏩   app.listen(PORT, handleListening);
            ➕  서버에 PORT번호를 부여한다
        ⏩   const handleListening = () => {}

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#3.1    
    1.  GET은 HTTP method중 하나다.
 
🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.2
    1.  server.js 수정
        ⏩   app.get("/",handleHome)
            ➕  get(route,controller)
            ➕  브라우저가 서버에 "/" 경로로 GET요청을 보내면 handleHome 함수가 실행된다.
        ⏩   const handleHome = () => console.log("Somebody is trying to go home.");

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#3.3
    1.  서버중단 하는법
        ⏩   ctrl + c

    2.  controller에는 express가 부여한 req,res object가 있다.
        ⏩   console.log(req/res)

    2.  server.js 수정  
        ⏩   return res.send("I still love you.");
            ➕  res.send()는 ()안의 text를 화면에 출력하고 request를 끝낸다.
            ➕  res.end()는 request를 끝낸다.
    
🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈