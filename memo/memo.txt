#2.0
    1.  package.json 생성
        ⏩   터미널에 npm init 입력하면 자동으로 생성nodeJS 프로젝트
        ⏩   package.json은 nodeJS 프로젝트
        ⏩   JSON = 프로그래머가 파일에 정보를 저장하기 위해 만든 방식 중 하나 (보통 객체를 생각하면 됌)
            ➕  package.json의 내부는 JSON 방식으로 작성되어 있음

    2.  index.js생성 

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#2.1
    1.  express 설치
        ⏩   npm i express
            ➕  node_modules 폴더 생김
                👉🏻  npm으로 설치한 모든 패키지가 저장
            ➕  packge-lock.json 생성

    2.  package.json 수정
        ⏩   "scripts" : { "server" : "node index.js" }
            ➕  터미널에 npm run dev 입력하면 index.js가 실행된다.
        ⏩   "dependencies" : { "express" :  "^4.18.1" }
            ➕  express가 설치되면서 자동으로 추가 된다.

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#2.2
    1.  .gitignore 생성
        ⏩   /node_modules

    2.  npm i 
        ⏩   npm이 package.json의 "dependencies"를 보고 필요한 것들을 모두 설치해준다.

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#2.3
    1.  babel 설치 방법
        ⏩   babel은 최신식 JS문법을 구식 JS문법으로 변환시켜 nodeJS 가 이해 할 수 있도록 해준다.
        ⏩   babeljs 홈페이지 > Setup > node선택 > 2번 복붙 > babel.config.json 생성 > 4번-shell 복붙 > 4번-JSON을 babel.config.json에 복붙

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#2.4
    1.  nodemon 설치 방법
        ⏩   nodemon은 서버의 변동사항을 감지해서 자동으로 서버를 재시작 해준다. 
        ⏩   babeljs 홈페이지 > Setup > nodemon > 2번 복붙 > package.json > npm i nodemon --save-dev > package.json > "scripts" : { "dev" : "nodemon --exec babel-node index.js" } 
    
    

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.0
    1.  src 폴더 생성
        ⏩   코드와 로직을 가지고 있는 파일들을 넣는다.
    
    2.  package.json 수정
        ⏩   "scripts": { "dev": "nodemon --exec babel-node src/server.js" }
            ➕  index.js ➡ server.js 파일명 변경 및 경로 변경 
    
    3.  server.js 수정
        ⏩   import express from "express"
            ➕  서버 임포트
        ⏩   const app = express();
            ➕  서버 선언
        ⏩   app.listen(PORT, handleListening);
            ➕  서버에 PORT번호를 부여한다
        ⏩   const handleListening = () => {}

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#3.1    
    1.  GET은 HTTP method중 하나다.
 
🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.2
    1.  server.js 수정
        ⏩   app.get("/",handleHome)
            ➕  get(route,controller)
            ➕  브라우저가 서버에 "/" 경로로 GET요청을 보내면 handleHome 함수가 실행된다.
        ⏩   const handleHome = () => console.log("Somebody is trying to go home.");

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞

#3.3
    1.  서버중단 하는법
        ⏩   ctrl + c

    2.  controller에는 express가 부여한 req,res object가 있다.
        ⏩   console.log(req/res)

    3.  server.js 수정  
        ⏩   return res.send("I still love you.");
            ➕  res.send()는 ()안의 text를 화면에 출력하고 request를 끝낸다.
            ➕  res.end()는 request를 끝낸다.

    4.  페이지를 만드는 순서 
        ⏩   서버에 route를 지정해주고, controller를 부여한뒤 controller를 작성
    
🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.4
    1.  http://expressjs.com/en/5x/api.html#express
        ⏩   express document

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞        

#3.5    
    1.  middleware 설명
        ⏩   request이후 response이전의 소프트웨어
        ⏩   middleware에는 express가 next argument를 부여해준다
    
    2.  server.js 수정
        ⏩   const gossipMiddleware = (req, res, next) => {}
            ➕  console.log(`Someone is going to: ${req.url}`);
                👉🏻  req.url 은 어떤 url로 요청되었는지 확인 할 수 있다.
            ➕  next();
                👉🏻  middleware에 next()를 써야 다음 controller로 넘어간다.

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.6
    1.  globalMiddleware(app.use) 설명
        ⏩   app.use(middleware)
            ➕  app.use(middleware)는 globalMiddleware를 만들 수 있게 해준다.
            ➕  app.use(middleware)는 app.get()보다 먼저 와야 한다.
            ➕  app에 들어오는 모든 요청은 app.use(middleware)를 거쳐 진행된다.
            ➕  app.use(middleware)로 특정 url의 요청은 거부할 수도 있다.
    
    2.  server.js 수정
        ⏩   const logger = (req, res, next) => {}
            ➕  console.log(`${req.method} ${req.url}`);
                👉🏻  req.method 는 요청된 method가 GET인지 POST인지 확인 할 수 있다.
        ⏩   const protectedMiddleware = (req, res, next) => {}
            ➕  if문을 써서 특정 url의 요청을 거부함
        ⏩   app.use(protectedMiddleware);
        ⏩   app.get("/", logger, handleHome);

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞        

#3.7
    1.  package.json 설명
        ⏩   package.json은 node.js 관련 정보를 담는 방법
        ⏩   scripts에 "key"와 "value"를 적으면 npm run key로 value를 실행할수있다.
        ⏩   dependencies는 프로젝트가 돌아가기위해 필요한 파일들 (node_modules폴더에 저장된다)
        ⏩   dependencies가 작성된 상태에서 npm i 하면 npm이 알아서 필요한 파일들을 설치해준다
        ⏩   nodemon은 파일이 수정되고 저장될때마다 서버를 재시작해주는 툴이다
    
    2.  Setup 순서
        ⏩  첫번째로 npm init을 이용해 package.json을 생성
        ⏩  두번째로 npm i express
        ⏩  세번째로 .gitignore 파일 생성 > /node_modules 작성 (그 외 커밋에 제외 할 파일/폴더들 작성)
        ⏩  네번째로 src폴더생성 > main JS 파일 생성
        ⏩  다섯번쨰로 바벨 설치
            ➕  babeljs 홈페이지 > Setup > node > 2번 콘솔에 복붙 > babel.config.json 생성 > 4번-shell 콘솔에 복붙 > 4번-JSON을 babel.config.json에 복붙
        ⏩  여섯번째로 nodemon 설치
            ➕  babeljs 홈페이지 > Setup > nodemon > 2번 콘솔에 복붙 > npm i nodemon --save-dev > package.json > "scripts" : { "dev" : "nodemon --exec babel-node index.js" } 

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.8
    1.  서버와 routes
        ⏩   서버는 항상 켜져있고, 인터넷에 연결되어있고, request를 listening 하고있는 컴퓨터다
        ⏩   request는 우리가 서버에게 요청하는 것들
        ⏩   route는 기본url + / , /login , /join , /blahblah 같은 것들을 통칭하는말
        ⏩   method는 서버에 요청을 어떤방식으로 할지 나타내는 것
    
    2.  main JS 작성 순서
        ⏩   첫번쨰로 express를 import해오고 app 변수에 express()를 담는다
            ➕  import express from "express"
        ⏩   두번째로 app에 포트번호를 지정해주고 해당포트번호를 listening 하게 한다
            ➕  const app = express()
        ⏩   세번째로 app에 method를 이용하여 route와 controller를 설정해준다
            ➕  app.get("route",controller)
        ⏩   네번쨰로 controller내부를 작성해준다
            ➕  const controller = (req,res) => {} 

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞        

#3.9    
    1.  controller
        ⏩   controller는 express로부터 req,res 오브젝트를 부여받는다
            ➕  const controller = (req,res) => {} 
        ⏩   req는 요청에 대한 정보를 담고있다. 
        ⏩   controller의 마지막엔 return을 꼭 쓰자
            ➕  const controller = (req,res) => {return res.end()} 

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#3.10
    1.  middleware
        ⏩   미들웨어는 request와 response중간에 있는 소프트웨어
        ⏩   미들웨어는 원하는만큼 작성가능
            ➕  app.get(route,middleware, middleware2 , ... middleware100 ,controller)
        ⏩   미들웨어는 express로부터 req,res 오브젝트와 next 함수를 추가로 부여받는다
        ⏩   next함수는 해당 미들웨어가 실행종료되면 다음 controller로 넘어가게 해주는 역할
            ➕  const middleware = (req,res,next) => {next()}
    
    2.  global middleware
        ⏩   app.use(middleware)
        ⏩   app.use(route,middleware)
        ⏩   app.use()는 app.get()보다 위에 있어야 한다.

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞        

#3.11   
    1.  Morgan middleware
        ⏩   npm i morgan
        ⏩   morgan에는 dev,combined,common,short,tiny 등 옵션이 있다

    2.  server.js 수정
        ⏩   morgan 사용
            ➕  import morgan from "morgan"
            ➕  const logger = morgan("dev");
            ➕  app.use(logger)

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#4.0
    1.  router는 작업중인 주제를 기반으로 url을 그룹화 해준다
        ⏩   /   /login   /join   /search   ...  /users/edit   /users/delete   ...   /videos/watch   /videos/edit   ...
            ➕  해당 프로젝트에서는 globalRouter와 userRouter, videoRouter가 필요

🌞        🌞          🌞          🌞          🌞          🌞          🌞          🌞        

#4.1
    1.  globalRouter는 home에서 바로 갈 수 있는 것들을 지정한다.
        ⏩   login, join, search 같은 것들

    2.  server.js 수정
        ⏩   globalRouter 생성
            ➕  const globalRouter = express.Router();
            ➕  app.use("/",globalRouter)
            ➕  globalRouter.get("/",handleHome)
            ➕  const handleHome = (req,res) => {res.send("HOME")}
        ⏩   userRouter 생성
            ➕  const userRouter = express.Router();
            ➕  app.use("/users",userRouter)
            ➕  userRouter.get("/edit",handleEditUser)
            ➕  const handleEditUser = (req,res) => {res.send("Edit User")}
        ⏩   videoRouter 생성
            ➕  const videoRouter = express.Router();
            ➕  app.use("/videos",videoRouter)
            ➕  videoRouter.get("/watch",handleWatchVideo)
            ➕  const handleWatchVideo = (req,res) => {res.send("Watch Video")}

🌈        🌈          🌈          🌈          🌈          🌈          🌈          🌈

#4.2
    1.  코드 정리
        ⏩   src폴더안에 routers폴더 생성
            ➕  globalRouter.js 생성
                👉🏻  import express from "express"
                👉🏻  const globalRouter = express.Router();
                👉🏻  globalRouter.get("/", handleHome);
                👉🏻  handleHome controller 작성
                👉🏻  export default globalRouter;
            ➕  userRouter.js 생성
                👉🏻  import express from "express"
                👉🏻  const userRouter = express.Router();
                👉🏻  userRouter.get("/edit", handleEditUser);
                👉🏻  handleEditUser controller 작성
                👉🏻  export default userRouter;
            ➕  videoRouter.js 생성
                👉🏻  import express from "express"
                👉🏻  const videoRouter = express.Router();
                👉🏻  videoRouter.get("/watch", handleWatchVideo);
                👉🏻  handleWatchVideo controller 작성
                👉🏻  export default videoRouter;
    그리고 각각의 js파일에는 express를 개별적으로 import해주어야함 (js는 독립된 파일이기 때문)
    각각의 router파일에서 router변수를 export default해주고 server.js에서 import해준다

    export default globalRouter는 누군가 globalRouter.js를 임포트하면 globalRouter자체를 임포트하는것이다
    import globalRouter from "./routers/globalRouter"

❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤❤🧡💛💚💙💜🤎🖤
여태까지 배운걸 토대로 순서

1.  npm init을 이용해 package.json을 생성

2.  npm i express

3.  .gitignore 파일 생성 > /node_modules 작성 (그 외 커밋에 제외 할 파일/폴더들 작성)

4.   src폴더생성 > main JS 파일 생성

5.  바벨 설치
    ⏩  babeljs 홈페이지 > Setup > node > 2번 콘솔에 복붙 > babel.config.json 생성 > 4번-shell 콘솔에 복붙 > 4번-JSON을 babel.config.json에 복붙

6.  nodemon 설치
    ⏩  babeljs 홈페이지 > Setup > nodemon > 2번 콘솔에 복붙 > npm i nodemon --save-dev > package.json > "scripts" : { "dev" : "nodemon --exec babel-node index.js" } 

7.  express를 import해오고 app 변수에 express()를 담는다
    ⏩  import express from "express"
    ⏩  const app = express();

8.  app에 포트번호를 지정해주고 해당포트번호를 listening 하게 한다
    ⏩   app.listen(PORT,handleListening)
        ➕  const PORT 작성
        ➕  const handleListening(){} 작성

9.  morgan 설치
    ⏩   npm i morgan

10. morgan을 import해오고 logger변수에 morgan("dev")을 담는다
    ⏩   import morgan from "morgan"
    ⏩   const logger = morgan("dev")

11. app.use로 logger 미들웨어를 지정한다
    ⏩   app.use(logger)

12. README.md 파일에 라우터들을 정리해준다
    ⏩   /   /login  /users/:id  /users/:id/edit   /videos/:id   /videos/upload ...

13. src 폴더 > routers폴더 생성 > 각각의 router.js 생성

14. 각각의 router.js 내부에 express import와 router선언
    ⏩   import express = "express";
    ⏩   const ---Router = express();

15. 각각의 router.js 내부에 route와 controller 선언
    ⏩  ---Router.get("route",controller)
    ⏩  const controller = (req,res) => { --- }

16. 각각의 router.js 내부에 router변수를 export default
    ⏩  export default ---Router

17. server.js에서 ---Router들 import
    ⏩   import ---Router from "./routers/---Router";